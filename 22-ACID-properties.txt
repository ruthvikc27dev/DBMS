ACID properties of transaction -

Atomicity
- All changes to data are performed as if they are a single operation. That is, all the changes are performed, or none of them are.
- For example, in an application that transfers funds from one account to another, the atomicity property ensures that, 
if a debit is made successfully from one account, the corresponding credit is made to the other account.

Component of database responsible for it:
- Recovery management component:
    - It takes care that either the atomicity is applied else rollback is done if any error arises
    before the commit statement.

How does it do it?
- Maintains log files till the commit statement is encountered.
- After a commit statement, the log file is deleted.

Consistency
- Data is in a consistent state when a transaction starts and when it ends.
- For example, in an application that transfers funds from one account to another, the consistency property ensures that the total value 
of funds in both the accounts is the same at the start and end of each transaction.

Who is responsible for this?
- It is user's/programmer's responsibility.

How does he ensure it?
- By setting various integrity constraints.

Isolation
- The intermediate state of a transaction is invisible to other transactions. As a result, transactions that run concurrently appear to be 
serialized.
-For example, in an application that transfers funds from one account to another, the isolation property ensures that another transaction 
sees the transferred funds in one account or the other, but not in both, nor in neither.

T1          |             T2
R(A)        |
W(A)        |
     (context switch T1->T2)
            |           R(A)
            |           R(B)
     (context switch T2->T1)
R(B)        |
W(B)        |

Durability
After a transaction successfully completes, changes to data persist and are not undone, even in the event of a system failure.
For example, in an application that transfers funds from one account to another, the durability property ensures that the changes made 
to each account will not be reversed.

How is it ensured?
- By ensuring recoverability
- Solution: using RAIN (Redundant Array of independent disks) to keep multiple copies of information at 
various places in the database. (To ensure we have an alternative location to retrieve information, in case of a crash)


Property	Responsibility for maintaining properties
Atomicity	Transaction Manager
Consistency	Application programmer
Isolation	Concurrency Control Manager
Durability	Recovery Manager


Reference:
https://www.geeksforgeeks.org/acid-properties-in-dbms/
https://www.ibm.com/docs/en/cics-ts/5.4?topic=processing-acid-properties-transactions/