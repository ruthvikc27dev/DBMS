R(A, B, C)
  1  1  1
  2  1  2 
  3  2  1
  4  2  2
FD = F = {A->BC, BC->A}

Decomposing the above table -
R(A, B)
  1  1
  2  1
  3  2
  4  2
F1 = {A->B}

R(B, C)
  1  1
  1  2
  2  1
  2  2
F2 = {}

After decomposition, 
If F1 U F2 U ... Fn equivalent to F, then it is dependency preserving   

But for this relation, it is not.

Ex 1 -
R(A, B, C, D, E)
F - {A->B, B->C, C->D, D->A}

R1(A, B, C)
A+ = {A, B, C, D} (D can be discarded as it is not part of this relation)
A->BC

B+ = {B, C, D, A} 
B->CA

C+ = {C, D, A, B}
C->AB

AB+ = {A, B, C, D}
AB->C (Can be discarded as C can be derived from previous closures)

BC+ = {B, C, D, A}
BC->A (Can be discarded as C can be derived from previous closures)

F1 = {A->BC, B->CA, C->AB}

R2(C, D, E)
C+ = {C, D, A, B}
C->D

D+ = {D, A, B, C}
D->C

E+ = E (trivial, can be discarded)

CD+ = {C, D, A, B} (discarded)

DE+ = {D, E, A, B, C}
DE->C (discarded)

CE+ = {C, E, D, A, B}
CE->D (discarded)

F2 = {C->A, D->C}

F1 U F2 is equivalent to F?

F1 U F2 = {A->BC, B->CA, C->AB, C->A, D->C}
F = {A->B, B->C, C->D, D->A}

D+ = {A, B, C, D}
D->A

yes, F1 U F2 is equivalent to F.

This is dependency preserving decomposition (upto 3NF, it is possible)

This is not compulsory as lossless decomposition